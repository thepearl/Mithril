# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Run CI tasks for iOS (optimized for self-hosted runners)"
  lane :ci do
    # Clean build artifacts for fresh CI run
    UI.message("üßπ Cleaning build artifacts...")
    sh("rm -rf ../build ../DerivedData")
    
    # Run SwiftLint with JUnit output for GitHub Actions
    UI.message("üîç Running SwiftLint...")
    swiftlint(
      mode: :lint,
      strict: true,
      raise_if_swiftlint_error: true,
      reporter: "junit",
      output_file: "swiftlint-results.xml"
    )
    
    # Run iOS-specific tests with better reporting
    test_ios
    
    UI.success("‚úÖ iOS CI tasks completed successfully!")
  end
  
  desc "Prepare and create a new release"
  lane :release do
    # Ensure working directory is clean
    ensure_git_status_clean
    
    # Get version from environment or prompt
    version = ENV["VERSION"] || UI.input("Enter version number (e.g., 1.0.0): ")
    
    # Validate version format
    unless version.match(/^\d+\.\d+\.\d+$/)
      UI.user_error!("‚ùå Invalid version format. Use semantic versioning (e.g., 1.0.0)")
    end
    
    # Update version in Package.swift if needed
    # Note: Swift packages don't typically have version numbers in Package.swift
    # but you can add custom logic here if needed
    
    # Run tests before release
    ci
    
    UI.success("üöÄ Release #{version} created successfully!")
    UI.message("Git tags should be created manually when needed.")
  end
  
  desc "Run tests on iOS only (with enhanced CI reporting)"
  lane :test_ios do
    ios_destinations = [
      "iOS Simulator,name=iPhone 15,OS=17.0",
      "iOS Simulator,name=iPhone 15 Pro,OS=17.0",
      "iOS Simulator,name=iPad Air (5th generation),OS=17.0"
    ]
    
    # Create test output directory
    sh("mkdir -p test_output")
    
    ios_destinations.each_with_index do |destination, index|
      UI.message("üß™ Testing on #{destination} (#{index + 1}/#{ios_destinations.length})")
      
      device_name = destination.split(',name=')[1].split(',')[0].gsub(' ', '_')
      result_bundle_path = "test_output/#{device_name}.xcresult"
      
      begin
        sh(
          "cd .. && xcodebuild clean build test " +
          "-scheme Mithril " +
          "-destination '#{destination}' " +
          "-resultBundlePath '#{result_bundle_path}' " +
          "CODE_SIGN_IDENTITY='' " +
          "CODE_SIGNING_REQUIRED=NO " +
          "ONLY_ACTIVE_ARCH=NO " +
          "| xcpretty --report junit --output test_output/#{device_name}-results.xml"
        )
        UI.success("‚úÖ Tests passed on #{destination}")
      rescue => ex
        UI.error("‚ùå Tests failed on #{destination}: #{ex.message}")
        raise ex
      end
    end
    
    UI.success("‚úÖ iOS tests passed on all devices!")
  end
  
  desc "Lint code with SwiftLint"
  lane :lint do
    swiftlint(
      mode: :lint,
      strict: true,
      raise_if_swiftlint_error: true
    )
  end
  
  desc "Auto-fix SwiftLint issues"
  lane :lint_fix do
    swiftlint(
      mode: :autocorrect,
      strict: false
    )
  end
end